h1. MakeTi

h2. How to start the project

Add the files from this repo to the root dir of your project and type one of the following in a terminal:

<pre>$ make run</pre>

_* To change the SDK version, change the SDK version in your tiapp.xml if SDK version is omitted defaults to Newest SDK version._
_* Optionally Set the iOS SDK version by adding <ios-version>(selected version)</ios-version> to your tiapp.xml._

<pre>$ make run</pre>

To run the application on Android, type:

<pre>$ make clean && make run platform=android</pre>

To run the application on iPad, type:

<pre>$ make clean && make run platform=ipad</pre>

The default platform is iPhone

_* You just have to use "make clean" before the run command if you change the device type. If you're using the same device between executions, it's not necessary to execute "make clean" because it will force Titanium to re-compile the entire project again, which is considerably slow._

h2. Certificates

When running the deploy command you can be asked for certificates.
Select the right one (based on a numeric value), depending on your cert type, ie:

<pre>make deploy cert=0</pre>

h2. Actions (only for iOS)

You can choose to deploy to device straight to iTunes or just create an adhoc build which you can either install to your device using iTunes, distribute to your testers or manually upload to TestFlight.

<pre>make clean && make deploy action=adhoc</pre>

h2. How to run on your device

To run your app on an iOS device you must simply add your development cert to <project dir>/certs/development.mobileprovision Creating the crets dir if needed.

After that, simply run
<pre>$ make deploy</pre>

To deploy the application on Android, type:

<pre>$ make clean && make deploy platform=android</pre>

To deploy the application on iPad, type:

<pre>$ make clean && make deploy platform=ipad</pre>

Android users also have an extra option of apkonly=true, so if you run:

<pre>make clean && make deploy platform=android apkonly=true</pre>

you will have an UNSIGNED (for dev use only, not for the market) apk located in:

(your project dir)/build/android/bin/app.apk

_* When you do a deploy on any iOS platform, it MakeTi will present to you a list of avaliable certs on your system, next to each cert is an id. you must re-run your deploy command using the cert you wish to use by adding cert=<id> to your command._

h2. Changing the provisioning cert

You can change the used certificate with the following flag:

<pre>make deploy profile_file=enterprise</pre>

This will load the provisioning cert file from <project dir>/certs/enterprise.mobileprovision


h2. Build and deploy directly to TestFlight

Simply run
<pre>$ make deploy testflight=true</pre>

Now before you do this, you will need to add 2 lines to your tiapp.xml file
You can also have the app auto distributed by setting a comma seperated list of distrabution lists

<img src="https://github.com/mattapperson/blog.mattapperson.com/raw/master/articles/MakeTi-The-make-build-script-for-titanium/Screen%20Shot%202012-01-23%20at%205.22.34%20PM.png" />

I also added an optional notes feature like so:
<pre>$ make deploy testflight=true notes="This is Beta 3 on my app"</pre>

That note will then be deliverd in the email to your beta testers informing them of the new app being ready to download.

_* Due to restrictions in the TestFlight API... if you dont set tf_dist in your Tiapp.xml... users wont get an email letting them know they can download till you go onto the testflight site and check them as users of the latest beta._

h2. Build and deploy directly to HockeyKit

Simply run
<pre>$ make deploy hockeykit=true</pre>

OR

<pre>$ make deploy platform=android hockeykit=true</pre>

To set your API key and app ID, simply add the following XML nodes to your tiapp.xml:
hockey_api (required)
hockey_ios_id (required for iOS upload, use the "Public app ID" HockeyKit provides)
hockey_android_id (required for android upload, use the "Public app ID" HockeyKit provides)

I also added an optional notes feature like so:
<pre>$ make deploy hockeykit=true notes="This is Beta 3 on my app"</pre>

That note will then be deliverd in the email to your beta testers informing them of the new app being ready to download.

_* Please not, an app must first be manualy created in HockeyKit, MakeTi wont create an app for you._

h2. How to install the Textmate bundle

1. Double-click on the **MakeTi.bundle** pack to install the bundle in Textmate.
2. Edit the ANDROID_SDK_PATH variablie in Textmate to the correct path of the Android SDK.
To do this go to _Preferences->Advanced->Shell variables_ add a new variable named **ANDROID_SDK_PATH** and set the path to the location of your Android SDK. (in my case is /android-sdk-mac_x86).
3. Open the whole project in Textmate.
B. Cmd+B within a file should open an option dialog letting you choose what to build for.

**Simulator only for now**

h2. How to install the SublimeText2 package

1. Copy the MakeTi.sublime-package file to _~/Library/Application\ Support/Sublime\ Text\ 2/Installed\ Packages/
2. Restart SublimeText2.
3. Edit the _~/Library/Application\ Support/Sublime\ Text\ 2/Packages/MakeTi/MakeTi.sublime-settings_ file to the correct path for the Android SDK.
4. Restart SublimeText2.
5. Open the whole project in SublimeText2.
6. Go to menu _Tools->Build System_ and select **MakeTi**.
7. Cmd+B within a file should open an option dialog letting you choose what to build for.

**Simulator only for now**

h2. To-Do

- Deploy to AppStore / Marketplace

- Don't ask if I want to replace the existing version of the app in iTunes (iOS only)

- Update the Textmate and SublimeText2 plugins for the new build options MakeTi offers (deploy to device and to testflight).

h2. License

Licensed under Apache Public License (Version 2).

Originally Developed by "Guilherme Chapiewski":http://guilherme.it. Extended and edited by "Matt Apperson":http://mattapperson.com.